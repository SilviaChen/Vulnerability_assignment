import json
import connexion
import pytest

flask_app = connexion.FlaskApp(__name__)
flask_app.add_api('../swagger/swagger.yml')

# mock_data

@pytest.fixture(scope='module')
def client():
    with flask_app.app.test_client() as c:
        yield c


@pytest.fixture(scope='module')
def helper(json_info):
    for info in json_info:
        first_row = info.decode("utf-8")
        return str(json.loads(first_row))


def test_users_get(client):
    test_user = "john.doe"
    response = client.get('/users')
    # using helper to format response json for assert
    json_info = helper(response.response)
    # assert response.status_code == 200
    if test_user not in json_info:
        print("FAIL: Not be able to found " + test_user)
        assert False


def test_users_get_by_id(client):
    test_id = "2"
    response = client.get('/users/' + test_id)
    # using helper to format response json for assert
    json_info = helper(response.response)
    assert response.status_code == 200
    if test_id not in json_info:
        print("FAIL: Not be able to found" + test_id)
        assert False


def test_users_post(client):
    test_user = "Jonathan Guo"
    test_email = "test@x.com"
    test_id = 888
    test_last_name = "Guo"
    test_firstname = "Jonathan"
    response = client.post('/users', data=json.dumps(dict(
        username=test_user,
        email=test_email,
        id=test_id,
        last_name=test_last_name,
        first_name=test_firstname,
    )), mimetype='application/json')
    # using helper to format response json for assert
    json_info = helper(response.response)
    if str(test_id) not in json_info and test_email not in json_info:
        print("FAIL: Not able to find found " + test_user + ' ' + test_email)
        assert False


def test_users_put(client):
    test_id = "2"
    test_email = "test.edu"
    response = client.put('/users/' + test_id, data=json.dumps(dict(email=test_email)),
                          mimetype='application/json')
    assert response.status_code == 200
    response = client.get('/users/' + test_id)
    # using helper to format response json for assert
    json_info = helper(response.response)
    if test_email not in json_info:
        print("FAIL: Not able to find " + test_email)
        assert False


def test_user_post_failed(client):
    test_user = "Myles Ro"
    test_email = "testfail@x.com"
    test_id = 87
    test_last_name = "Ro"
    test_firstname = "Myles"
    test_err_msg = "{\'detail\': \'The method is not allowed for the requested URL.\'}"

    response = client.post('/users/location', data=json.dumps(dict(
        username=test_user,
        email=test_email,
        id=test_id,
        last_name=test_last_name,
        first_name=test_firstname,
    )), mimetype='application/json')

    assert response.status_code == 405
    json_info = str(helper(response.response))
    print(json_info)
